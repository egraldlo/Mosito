
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 290
#define YY_END_OF_BUFFER 291
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1215] =
    {   0,
        0,    0,    0,    0,    0,    0,  291,  289,  288,  288,
      246,  289,  283,  246,  246,  289,  246,  246,  246,  229,
      229,  289,  249,  253,  250,  289,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  289,  246,  287,  287,  272,  251,    0,  241,
      239,    0,  283,  247,    0,  240,  238,    0,    0,  231,
        0,  285,  230,  229,    0,    0,    0,  282,  257,  254,
      252,  255,  258,    0,  275,    0,    0,  272,  272,  272,
      272,    8,  272,  272,    0,  272,  272,  272,  272,  272,

       19,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,   87,  272,   89,
       98,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  133,  272,  138,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  199,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,    0,  272,  272,  272,    0,  274,    0,  248,
      286,  272,    0,    0,  239,    0,    0,    0,  238,    0,

      284,    0,  234,  230,    0,  244,    0,  232,  243,  256,
        0,  279,    0,  281,    0,  280,    1,    2,  272,  272,
        6,    7,    9,  272,  269,    0,  272,  272,  272,  272,
      272,   15,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,   42,   49,
      272,  272,  272,  272,  272,   59,  272,  272,  272,  272,
      272,  272,   66,  272,  272,  272,  272,  272,  272,  272,
       74,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,   95,  272,  272,  102,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  271,  272,  272,  272,  270,  126,  272,  272,  129,
      272,  272,  272,  272,  272,  140,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  172,  272,  272,  272,  272,  272,  272,  179,  186,
      272,  272,  272,  268,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  209,  272,  272,  272,  272,  272,  272,  272,
      272,  272,    0,  224,  272,  272,  273,    5,    0,  239,
        0,  238,  284,    0,  233,  276,  278,  277,  272,  272,

      272,  245,  272,  272,  272,  272,  272,   16,   17,  272,
       20,  272,   22,  272,  272,   24,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,   43,  272,  272,  272,  272,  272,   54,  272,  272,
      272,   61,   62,  272,   63,   64,   67,  272,  272,   70,
      272,  272,  272,  272,  272,  272,   77,  272,  272,  272,
       81,  272,  272,   45,  272,  272,  272,  272,  272,  272,
      197,  174,   95,   13,  272,   97,  272,  100,  103,  104,
      272,  272,  107,  108,  272,  272,  111,  272,  114,  115,
      118,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  131,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  151,  153,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  173,  272,  175,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  193,  194,  195,  272,  272,  272,  272,  235,
      202,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  220,  218,  272,  272,  222,
      272,  242,  225,  272,    0,    0,    0,    0,    3,  272,
      272,  272,  228,  272,  272,  272,   18,  272,  265,  272,

      272,   25,  272,  272,  272,  272,  272,  272,  272,  272,
      267,  272,   34,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  237,   72,   73,   75,  272,  272,   79,   80,
      272,  272,  272,  272,  101,  272,   91,   92,  272,  272,
      272,  272,  272,  272,  106,  109,  110,  272,  272,  272,
      272,  120,  272,  272,  272,  272,  272,  226,  272,  272,
      272,  272,  272,  272,  139,  141,  272,  272,  272,  272,
      272,  272,  148,  272,  149,  152,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  164,  155,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  189,  272,  272,
      272,  272,  272,  272,  272,  260,  203,  272,  272,  272,
      272,  272,  272,  208,  210,  272,  272,  214,  272,  272,
      272,  219,  221,  223,  272,  272,  272,   11,  272,   14,
      272,   23,  272,  272,  272,   27,  272,  272,  272,  272,
      272,   33,  272,   39,  272,  272,  272,  272,  272,  272,
      272,  272,   53,  272,  272,  272,   60,  272,   65,  272,
       69,  272,   73,  272,  272,   82,  272,  272,  272,   88,
       90,  272,   94,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,   47,  272,  272,  272,  132,  272,
      272,  136,  272,  272,  272,  272,  272,  272,  272,  272,
      155,  272,  157,  158,  272,  272,  272,  162,  163,  165,
      166,   48,  169,  272,  272,  272,  176,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  190,  272,
      272,  272,  272,  272,  272,  272,  204,  272,  205,  272,
      207,  263,  272,  272,  214,  272,  272,  272,  272,    4,
      272,   12,   21,  272,  272,   26,   28,  272,  272,  272,
       32,  272,  272,  272,  272,  272,   49,   50,   51,   52,
      272,  272,  272,  272,   68,   71,   76,  272,  272,  272,

      272,  272,   95,  272,   99,  105,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  128,  272,   49,
      272,  272,  142,  272,  272,  145,  272,  272,  150,  272,
      156,  159,  160,  272,  167,  272,  272,  272,  272,  177,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  259,
      272,  272,  272,  272,  272,  272,  201,  236,  272,  272,
      272,  272,  216,  217,  272,  272,  272,  272,  272,  272,
       31,  266,  272,   40,   44,  272,  272,   55,  272,   57,
      272,   78,  272,  272,  272,  272,  272,   96,  272,  116,
      117,  272,  272,  272,  272,  272,  272,  272,  272,  127,

      272,  135,  272,  272,  272,  272,  272,  272,  161,  272,
      272,  272,  178,  272,  181,  272,  272,  272,  272,  187,
      272,  272,  272,  272,  272,  198,  200,  206,  211,  212,
      272,  272,  227,  272,   24,  264,   29,  272,  272,  272,
      272,   41,  261,  262,  272,  272,  134,  272,  272,  272,
      272,  272,  112,  272,  272,  122,  272,  272,  122,  272,
      272,  272,  272,  272,  144,  146,  272,  272,  272,  170,
      171,  272,  272,  272,  272,  272,  272,  272,  191,  272,
      196,  272,  215,  272,  272,   30,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  121,  123,

      272,  272,  272,  272,  137,  272,  147,  154,  272,  272,
      182,  272,  272,  272,  272,  192,  272,  272,  272,  272,
      272,  272,  272,   58,  272,  272,   85,   86,   93,  272,
      272,   46,  272,  272,  272,  143,  272,  272,  272,  272,
      272,  272,  272,  272,  272,   35,   36,   38,  272,  272,
      272,  272,  119,  272,  272,  272,  272,  180,  272,  272,
      272,  272,  272,  216,  272,  272,   56,   83,  272,  272,
      272,  125,  272,  272,  272,  272,  272,  188,  213,   10,
      272,  272,  113,  272,  272,  272,  183,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,   84,  272,  272,

      272,  272,  185,   37,  272,  272,  272,  272,  124,  130,
      168,  272,  184,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
        8,   12,   13,    8,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   22,   20,   23,    8,   24,
       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
        1,   54,    1,    8,   55,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,    1,   83,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    7,    8,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[1235] =
    {   0,
        0,    0,  856,  853,   56,   57,  861, 2617, 2617, 2617,
      832,   83,    0, 2617,  847,   84,  820,   78,  811,  125,
       87,  786,   65, 2617,   67,  106,   81,  196,  125,  133,
      146,  185,   58,  187,  232,   79,  176,  238,  254,  183,
      240,  256,   75,  284,  326,  318,  363,   98,  376,  124,
      103,  139,  290,  631, 2617,  663,  345, 2617,  215, 2617,
      672,  244,    0, 2617,  114, 2617,  656,  324,  661,  319,
      434, 2617,  410,  442,  162,  459,    0, 2617, 2617,  585,
     2617, 2617, 2617,  587,  183,  575,  572,    0,  141,  224,
      437,  192,  221,  255,  258,  436,  301,  286,  312,  322,

        0,  368,  454,  465,  453,  371,  440,  490,  479,  369,
      425,  474,  460,  455,  478,  480,  504,  488,  485,  499,
      498,  502,  506,  520,  504,  517,  511,    0,  519,  552,
        0,  531,  531,  516,  532,  553,  563,  579,  555,  553,
      610,  564,  540,  570,  579,    0,  561,  595,  592,  597,
      620,  598,  617,  664,  610,  618,  618,  624,  676,  618,
      633,  624,  667,  628,  636,  673,  680,  658,  705,  668,
      713,    0,  715,  729,  726,  730,  672,  716,  680,  741,
      712,  728,    0,  725,  743,  731,  798, 2617,  561, 2617,
     2617,  779,  123,  421,  812,  813,  277,  809,  817,  818,

        0,  823,  829,  856,  872,  304,  862,  878,    0, 2617,
      128, 2617,  115, 2617,  344, 2617,    0,    0,  771,  769,
        0,    0,    0,  767,    0,  490,  782,  790,  779,  794,
      805,    0,  806,  852,  869,  863,  873,  863,  876,  868,
      870,  870,  880,  871,  885,  868,  876,  887,    0,  889,
      895,  931,  894,  913,  899,    0,  931,  918,  923,  925,
      930,  934,    0,  927,  940,  923,  932,  926,  943,  948,
      947,  938,  941,  940,  934,  948,  948,  950,  941,  945,
      971,  968,  985,  970,  987, 1002,  977,  984,  980,  988,
     1000,  981,  997,  994, 1003, 1005, 1012, 1003,  995,  436,

     1009,    0, 1005,  997, 1012,  997, 1016, 1006, 1013,    0,
     1012, 1036, 1048, 1040, 1051, 1052, 1039, 1057, 1048, 1059,
     1058, 1048, 1064, 1064, 1065, 1066, 1067, 1072, 1069, 1054,
     1060, 1062, 1069, 1084, 1082, 1094, 1102, 1093, 1106, 1095,
     1114,    0, 1093, 1105, 1113, 1118, 1100, 1120, 1134,    0,
     1107, 1125, 1108,    0, 1117, 1114, 1118, 1112, 1120, 1133,
     1116, 1133, 1159, 1145, 1136, 1158, 1150, 1150, 1160, 1173,
     1171, 1170,    0, 1164,  429, 1160, 1186, 1172, 1173, 1172,
     1177, 1170,  456,    0, 1174, 1181, 2617,    0,  327,  671,
      434,  668,    0, 1236, 1242, 2617, 2617, 2617, 1191, 1190,

      403, 2617, 1204, 1209, 1219, 1225, 1223,    0,    0, 1237,
        0, 1242,    0,  438, 1238, 1245, 1236, 1243, 1248, 1237,
     1249, 1246, 1236, 1248, 1253, 1239, 1240, 1242, 1257, 1248,
     1262, 1245, 1253, 1266, 1248, 1255, 1261, 1264, 1279, 1290,
     1288,    0,    0, 1292,    0, 1293,    0, 1287, 1284,    0,
     1304, 1301, 1299, 1288, 1307, 1304,    0, 1294, 1295, 1300,
        0, 1303,  379,  370, 1300, 1295, 1308, 1303, 1302, 1309,
        0,    0,    0,    0, 1346,    0, 1324,    0,    0,    0,
     1329, 1334,    0,    0, 1320, 1336,    0, 1345,    0, 1356,
        0, 1343, 1352, 1340, 1347, 1351, 1345, 1360, 1362, 1353,

     1354,    0, 1368, 1356, 1362, 1360, 1361, 1371, 1372, 1374,
     1384, 1391, 1392, 1393, 1391, 1402, 1396,    0, 1398, 1393,
     1417, 1406, 1419, 1420, 1413, 1405, 1406, 1417, 1409, 1425,
     1410, 1419, 1419, 1431, 1426, 1418,    0, 1425,    0, 1425,
     1430, 1432, 1419, 1434, 1454, 1471, 1436, 1460, 1451, 1470,
     1461, 1468,    0,    0, 1459, 1471, 1467, 1474,  354,    0,
        0, 1468, 1465, 1472, 1485, 1482, 1472, 1475, 1489, 1488,
     1492, 1492, 1490, 1493, 1504,    0,    0, 1509, 1522,    0,
     1524, 2617,    0, 1525,  679, 1554,  768,  771,    0, 1507,
     1525, 1530,    0, 1531, 1517, 1513,    0, 1535, 2617, 1535,

     1541,    0, 1526, 1526, 1533, 1534, 1529, 1532, 1537, 1535,
        0, 1549,    0, 1541, 1539, 1558, 1552, 1570, 1569, 1554,
     1573, 1582, 1586, 1583, 1580, 1580, 1590, 1593, 1591, 1593,
     1583, 1594,    0,    0,  397,    0, 1597, 1600,    0,    0,
     1599, 1591, 1596, 1603,    0, 1605,    0,    0, 1592, 1592,
     1608, 1595, 1599, 1614,    0,    0,    0, 1609, 1618, 1638,
     1627,    0, 1634, 1630, 1645, 1646, 1643,    0, 1652, 1645,
     1637, 1647, 1651, 1647,    0,    0, 1650, 1643, 1645, 1647,
     1662, 1664,    0, 1663,    0,    0, 1664, 1654, 1652, 1668,
     1655, 1674, 1668, 1678, 1674, 1696,    0,    0, 1687, 1704,

     1703, 1688, 1689, 1709, 1702, 1707, 1712, 1708, 1715, 1718,
     1702, 1712, 1721, 1710, 1715, 1718, 1708, 1708, 1710, 1715,
     1711, 1719, 1730, 1735, 1740, 2617,    0, 1741, 1736, 1750,
     1749, 1760,  351,    0,    0, 1765, 1758, 1749, 1755, 1769,
     1757,    0,    0,    0, 1763, 1771, 1763,    0, 1764,    0,
     1774,    0, 1760, 1778, 1777,    0, 1763, 1775, 1784, 1765,
     1767,    0, 1769,    0, 1772, 1780, 1798, 1782, 1792, 1812,
     1799, 1817,    0, 1821, 1815, 1822,    0, 1825,    0, 1823,
        0, 1814,    0, 1815, 1806,    0, 1816, 1826, 1831,    0,
        0, 1828,    0, 1820, 1838, 1835, 1834, 1833, 1828, 1820,

     1836, 1873, 1842, 1840,  288, 1846, 1848, 1841,    0, 1859,
     1851, 1878, 1876, 1874, 1875, 1860, 1865, 1867, 1870, 1878,
        0, 1889,    0,    0, 1890, 1891, 1894,    0,    0,    0,
     1879,  274,    0, 1890, 1880, 1887,    0, 1890, 1894, 1900,
     1887, 1895, 1911, 1907, 1919, 1919, 1927, 1956,    0, 1936,
     1938, 1940, 1922, 1919, 1930, 1927,    0, 1932,    0, 1945,
        0, 2617, 1931, 1939,    0, 1952, 1936, 1948, 1944,    0,
     1954,    0,    0, 1953, 1954,    0,    0, 1945, 1952, 1958,
      313,  236, 1962, 1964, 1972, 1975,    0,    0,    0,    0,
     1973, 1977, 1973, 1975,    0,    0,    0, 1977, 1990, 1997,

     1998, 1982,    0, 1991,    0,    0, 1991, 2006, 1989, 1995,
     2000, 1999, 2009, 2012, 2002, 2004, 1999,    0, 2014,    0,
     2016, 2013,    0, 2012, 2019,    0, 2017, 2027,    0, 2046,
        0,    0,    0, 2031,    0, 2040, 2033, 2042, 2038,    0,
     2056, 2044, 2056, 2053,  200, 2063, 2055, 2061, 2049, 2617,
     2056, 2053, 2052, 2060, 2054, 2068,    0,    0, 2072, 2072,
     2074, 2063, 2082,    0, 2073, 2074, 2075,  239, 2080, 2093,
        0, 2617, 2105, 2092,    0,  234,  225,    0, 2104, 2097,
     2111,    0, 2102, 2100, 2098, 2105, 2115,    0, 2122,    0,
        0, 2110, 2114, 2110, 2107, 2117, 2113, 2125, 2130,    0,

      179,    0, 2125, 2125, 2127, 2138, 2135, 2146,    0, 2143,
     2160, 2149,    0, 2149,    0, 2157, 2155,  164, 2162,    0,
      154, 2168, 2151, 2172, 2162,    0,    0,    0,    0, 2163,
     2158, 2181,    0, 2180,    0, 2617,    0, 2166, 2186, 2179,
     2170,    0, 2617, 2617, 2171, 2176,    0, 2174, 2178, 2175,
     2183, 2177, 2182, 2199, 2207,    0, 2190, 2209,    0, 2222,
     2224, 2209, 2206, 2227,    0,    0, 2219, 2215, 2232,    0,
        0, 2227, 2233, 2236, 2236,  136, 2233,  173,    0, 2240,
        0, 2225,    0, 2226, 2234,    0, 2228, 2236, 2245, 2231,
     2230, 2246, 2238, 2254, 2262, 2262, 2248, 2261,    0,    0,

     2279, 2267, 2272, 2274,    0, 2286,    0,    0, 2273, 2277,
        0, 2274, 2279, 2280, 2284,    0, 2299, 2296, 2297, 2298,
     2299, 2287, 2297,    0, 2287, 2303,    0,    0,    0, 2308,
     2286,    0, 2298, 2301,  108,    0, 2302, 2310, 2304, 2305,
     2334, 2332, 2330, 2327, 2333,    0, 2329,    0, 2346, 2325,
     2348, 2339,    0, 2337, 2353, 2356, 2340,    0, 2348, 2347,
     2343, 2349, 2348,    0, 2345, 2346,    0,    0, 2352, 2353,
     2366,    0, 2364, 2370, 2362, 2379, 2363,    0,    0,    0,
     2396, 2385,    0, 2398, 2389, 2402,    0,   81, 2394, 2394,
     2404, 2394, 2398, 2399, 2397, 2396, 2401,    0, 2404, 2404,

     2406, 2406,    0,    0, 2418, 2416, 2420, 2402,    0,    0,
        0, 2408,    0, 2617, 2483, 2491, 2499, 2507, 2513, 2516,
     2523, 2530, 2538,  109, 2546, 2554, 2562,   95, 2569, 2576,
     2584, 2592, 2600, 2608
    } ;

static yyconst flex_int16_t yy_def[1235] =
    {   0,
     1214,    1, 1215, 1215,    1,    1, 1214, 1214, 1214, 1214,
     1214, 1216, 1217, 1214, 1214, 1218, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1219, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1221, 1214, 1214, 1214, 1220, 1214, 1216, 1214,
     1214, 1222, 1217, 1214, 1218, 1214, 1214, 1223, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1224, 1214, 1214, 1214,
     1214, 1214, 1214, 1225, 1219, 1226, 1227, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1214, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1228, 1220, 1220, 1220, 1221, 1214, 1229, 1214,
     1214, 1220, 1230, 1216, 1216, 1222, 1231, 1218, 1218, 1223,

     1232, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1224, 1214,
     1225, 1214, 1226, 1214, 1227, 1214, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1214, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1228, 1220, 1220, 1220, 1214, 1220, 1233, 1230,
     1234, 1231, 1232, 1214, 1214, 1214, 1214, 1214, 1220, 1220,

     1220, 1214, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1214, 1220, 1220, 1230, 1233, 1231, 1234, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1214, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1214, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1214, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1214,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1214, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1214, 1220, 1220, 1220, 1220,
     1220, 1220, 1214, 1214, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220,    0, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214
    } ;

static yyconst flex_int16_t yy_nxt[2701] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   14,   14,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    8,    8,   53,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   54,   57,   57,   60,   66,   61,   79,   80,
       81,   82,   83,   67,   70,   70,   70,   70,   70,   70,

      383,   73,  124,   74,   74,   74,   74,   74,   74,   71,
       84,   89,   57,   57,  209,   86,   66,  214,   76,   90,
      133,   91,  153,   67,  397,  178,   92,   61,   93,   94,
      212,  124,  396,  183,  185, 1195,   62,   68,   71,   73,
       89,   74,   74,   74,   74,   74,   74,   76,   90,  133,
       91,  153,  102,   75,  178,   92,   76,   93,   94,  103,
      107,   87, 1156,  185,  108,  184,  104,   68,  109,  105,
      186,  217,  106,  113,  110,   77,  389,  111,  206,  206,
      112,  102,   75,  950,  114,   76,  115, 1214,  103,  107,
     1114,  116, 1214,  108,  184,  104,  117,  109,  105,  186,

      217,  106,  113,  110,   77,   95,  111,  134, 1077,  112,
      143,  135,  118,  114,  125,  115,  119,   60, 1075,   61,
      116,  223,  126,  120,  144,  117,  121,   96,  127,  122,
      145,   97,  123, 1062,   98, 1044,  134,   99, 1214,  143,
      135,  118,  100,  125, 1043,  119,   60,  101,  195, 1036,
      223,  126,  120,  144, 1017,  121,   96,  127,  122,  145,
       97,  123,  218,   98,  128,  129,   99,  224,   62,  136,
      219,  100,  130,  137,  226,  226,  101,  131,  132,  138,
      146,  139,  147,  150,  148,  140,   67,  149,  225,  141,
      973,  218,  188,  128,  129,  142,  224,  196,  136,  219,

      151,  130,  137,  152,  189,  189,  131,  132,  138,  146,
      139,  147,  150,  148,  140,  154,  149,  225,  141,  155,
      206,  206,  156,  972,  142,  157,   66,  233,  936,  151,
      391,  390,  152,  199,  230,   70,   70,   70,   70,   70,
       70,  231,  916,  189,  154,  168,  216,  232,  155,  169,
       71,  156,  170,  171,  157,  158,  233,  159,  234,  172,
      160,  862,  173,  230,  726,  161,  235,  162,  163,  164,
      231,  165,  166,  167,  168,   89,  232,  200,  169,   71,
      586,  170,  171,   90,  158,  192,  159,  234,  172,  160,
       92,  173,   93,   94,  161,  235,  162,  163,  164,  398,

      165,  166,  167,  174,   89,  175,  236,  179,  176,  177,
      180,  181,   90,  237,  192,  247,  257,  783,  777,   92,
      182,   93,   94,   60,  643,   61,  204,  204,  204,  204,
      204,  204,  174,  642,  175,  236,  179,  176,  177,  180,
      181,  205,  237,  392,  247,  257,  202,  202,  599,  182,
      203,  203,  203,  203,  203,  203,   73,  591,   74,   74,
       74,   74,   74,   74,  220,  582,  258,  221,  227,  228,
      205,  207,  207,   76,   62,  208,  208,  208,  208,  208,
      208,  238,  229,  571,  245,  239,  248,  588,  222,  261,
      492,  249,  240,  220,  246,  258,  221,  227,  228,  402,

      262,  259,   76,  241,  242,  243,  226,  226,  263,  265,
      238,  229,  244,  245,  239,  248,  260,  222,  261,  250,
      249,  240,  251,  246,  255,  264,  268,  256,  252,  262,
      259,  269,  241,  242,  243,  253,  254,  263,  265,  266,
      270,  244,  271,  272,  273,  260,  267,  274,  250,  276,
      278,  251,  277,  255,  264,  268,  256,  252,  279,  280,
      269,  275,  287,  188,  253,  254,  288,  289,  266,  270,
      290,  271,  272,  273,  216,  267,  274,  214,  276,  278,
      291,  277,  281,  303,  282,  292,  309,  279,  280,  212,
      275,  287,  283,  284,  307,  288,  289,  285,  286,  290,

      293,  301,  294,  295,  308,  302,  296,  314,  297,  291,
      210,  281,  303,  282,  292,  309,  310,  312,  313,  298,
      299,  283,  284,  307,  311,  315,  285,  286,  300,  293,
      301,  294,  295,  308,  302,  296,  314,  297,  316,  304,
      305,  317,  321,  334,  322,  310,  312,  313,  298,  299,
      306,  318,  323,  335,  315,  319,  336,  300,  337,  343,
      344,  320,  201,  345,  346,  197,  349,  316,  304,  305,
      317,  321,  334,  322,  350,  390,  193,  392,  191,  306,
      318,  323,  335,   61,  319,  336,  355,  337,  343,  344,
      320,  324,  345,  346,  347,  349,  325,  326,  348,  359,

      351,  375,  327,  350,  328,  338,  329,  330,  353,  331,
      332,  378,  333,  190,  339,  355,  340,  352,  341,  354,
      324,  391,  342,  347,  389,  325,  326,  348,  359,  351,
      375,  327,  389,  328,  338,  329,  330,  353,  331,  332,
      378,  333,  362,  339,  356,  340,  352,  341,  354,  357,
      363,  342,  360,  361,  376,  358,  370,  372,  381,  365,
      377,  373,  364,  382,  366,  374,  367,  368,  371,  384,
      385,  362,  379,  356,  369,  386,  380,   67,  357,  363,
      392,  360,  361,  376,  358,  370,  372,  381,  365,  377,
      373,  364,  382,  366,  374,  367,  368,  371,  384,  385,

      188,  379,  399,  369,  386,  380,  220,  400,  401,  388,
       78,   66,  189,  189,   60,   60,  390,  195,   67,   66,
       66,  391,   72,  403,  588,  404,  392,  199,  405,  406,
      222,  399,  407,   69,  408,  220,  400,  401,  388,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  189,  403,  387,  404,   64,   58,  405,  406,  222,
     1214,  407,   68,  408,   56,   62,  196,   56, 1214, 1214,
       68,  200,  204,  204,  204,  204,  204,  204,  208,  208,
      208,  208,  208,  208,  394,  394,  409,  205,  395,  395,
      395,  395,  395,  395,  208,  208,  208,  208,  208,  208,

      410,  411,  412,  415,  413,  417,  418,  416,  419,  421,
      422,  426,  427,  428,  431,  409,  205,  420,  432,  414,
      429,  430,  435,  438,  433,  423,  424,  434,  425,  410,
      411,  412,  415,  413,  417,  418,  416,  419,  421,  422,
      426,  427,  428,  431,  439,  440,  420,  432,  414,  429,
      430,  435,  438,  433,  423,  424,  434,  425,  436,  441,
      442,  443,  437,  444,  445,  446,  447,  448,  449,  450,
      451,  452,  453,  439,  440,  454,  455,  457,  456,  458,
      459,  460,  461,  462,  463,  464,  465,  436,  441,  442,
      443,  437,  444,  445,  446,  447,  448,  449,  450,  451,

      452,  453,  466,  467,  454,  455,  457,  456,  458,  459,
      460,  461,  462,  463,  464,  465,  468,  469,  470,  471,
      472,  477,  473,  474,  478,  479,  480,  483,  484,  485,
      481,  466,  467,  475,  486,  487,  490,  491,  493,  488,
      494,  495,  496,  476,  497,  468,  469,  470,  482,  489,
      477,  498,  499,  478,  479,  480,  483,  484,  485,  481,
      500,  501,  475,  486,  487,  490,  491,  493,  488,  494,
      495,  496,  476,  497,  502,  505,  503,  482,  489,  504,
      498,  499,  506,  507,  508,  509,  510,  511,  512,  500,
      501,  514,  515,  516,  517,  513,  519,  520,  521,  522,

      523,  525,  518,  502,  505,  503,  526,  524,  504,  527,
      528,  506,  507,  508,  509,  510,  511,  512,  529,  530,
      514,  515,  516,  517,  513,  519,  520,  521,  522,  523,
      525,  518,  531,  532,  533,  526,  524,  534,  527,  528,
      535,  536,  537,  538,  539,  540,  541,  529,  530,  542,
     1214,  547,  548,  549, 1214,  550,  551,  552,  553, 1214,
      554,  531,  532,  533,  555,  543,  534,  556,  557,  535,
      536,  537,  538,  539,  540,  541,  560,  561,  542,  544,
      547,  548,  549,  545,  550,  551,  552,  553,  546,  554,
      564,  565,  558,  555,  543,  566,  556,  557,  559,  562,

      567,  563,  568,  569,  570,  560,  561,  572,  544,  576,
      579,  580,  545,  577,  573,  574,  581,  578,  583,  564,
      565,  558,  584, 1214,  566, 1214, 1214,  559,  562,  567,
      563,  568,  569,  570, 1214,  589,  572,  575,  576,  579,
      580,  590,  577,  573,  574,  581,  578,  583,  592,  593,
      594,  584,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  589,  595,  575,  596,  597,  598,
      590,  600,  601,  602,  603,  604,  605,  592,  593,  594,
      606,  607,  608,  609,  610,  611,  612,  613,  614,  615,
      616,  617,  619,  620,  595,  621,  596,  597,  598,  618,

      600,  601,  602,  603,  604,  605,  622,  623,  624,  606,
      607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
      617,  619,  620,  625,  621,  626,  627,  628,  629,  630,
      631,  632,  633,  634,  635,  622,  623,  624,  636,  637,
      638,  639,  640,  641,  644,  645,  646,  647,  648,  649,
     1214,  653,  625,  650,  626,  627,  628,  629,  630,  631,
      632,  633,  634,  635,  654,  655,  656,  636,  637,  638,
      639,  640,  641,  644,  645,  646,  647,  648,  649,  651,
      653,  657,  650,  658,  659,  661,  662,  663,  664,  665,
      652,  666,  667,  654,  655,  656,  668,  669,  670,  671,

      672,  673,  660,  674,  675,  676,  677,  678,  651,  679,
      657,  680,  658,  659,  661,  662,  663,  664,  665,  652,
      666,  667,  681,  682,  683,  668,  669,  670,  671,  672,
      673,  660,  674,  675,  676,  677,  678,  684,  679,  685,
      680,  686,  687,  688,  689,  690,  691,  692,  693,  694,
      695,  681,  682,  683,  696,  697,  698,  699,  700,  701,
      702,  703,  704,  705,  706,  707,  684,  708,  685,  709,
      686,  687,  688,  689,  690,  691,  692,  693,  694,  695,
      710,  711,  715,  696,  697,  698,  699,  700,  701,  702,
      703,  704,  705,  706,  707,  716,  708,  717,  709,  712,

      713,  718,  719,  720,  721,  724,  722,  725,  727,  710,
      711,  715,  728,  729,  730,  731,  714,  723,  732,  733,
      734,  735,  736,  738,  716,  739,  717,  740,  712,  713,
      718,  719,  720,  721,  724,  722,  725,  727,  737,  741,
      742,  728,  729,  730,  731,  714,  723,  732,  733,  734,
      735,  736,  738,  743,  739,  744,  740,  745,  390,  746,
      747,  748,  749,  474,  750,  751,  752,  737,  741,  742,
      753,  754,  755,  756,  757,  758,  759,  760, 1214,  761,
      762,  763,  743,  764,  744,  765,  745,  766,  746,  747,
      748,  749,  474,  750,  751,  752,  769,  767,  770,  753,

      754,  755,  756,  757,  758,  759,  760,  586,  761,  762,
      763,  771,  764,  772,  765,  768,  766,  773,  774,  775,
      776,  777,  778,  779,  780,  769,  767,  770,  781,  782,
      784,  785,  786,  787,  790,  788,  791,  792,  793,  794,
      771,  789,  772,  795,  768,  796,  773,  774,  775,  776,
      777,  778,  779,  780,  797,  798,  799,  781,  782,  784,
      785,  786,  787,  790,  788,  791,  792,  793,  794,  800,
      789,  801,  795,  802,  796,  803,  804,  805,  806,  807,
      808,  809,  810,  797,  798,  799,  811,  812,  813,  814,
      815,  816,  817,  818,  819,  820,  821,  822,  800,  823,

      801,  824,  802,  825,  803,  804,  805,  806,  807,  808,
      809,  810,  826,  827,  828,  811,  812,  813,  814,  815,
      816,  817,  818,  819,  820,  821,  822,  829,  823,  830,
      824,  831,  825,  832,  833,  834,  835,  836,  837,  838,
      839,  826,  827,  828,  840,  841,  842,  843,  844,  845,
      846,  847,  848,  849,  850,  851,  829,  852,  830,  853,
      831,  854,  832,  833,  834,  835,  836,  837,  838,  839,
      855,  856,  857,  840,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  850,  851,  858,  852,  859,  853,  860,
      854,  861,  863,  864,  865,  866,  867,  868,  869,  855,

      856,  857,  870,  871,  872,  873,  874,  875,  876,  877,
      878,  879,  880,  881,  858,  882,  859,  883,  860,  884,
      861,  863,  864,  865,  866,  867,  868,  869,  885,  886,
      887,  870,  871,  872,  873,  874,  875,  876,  877,  878,
      879,  880,  881,  888,  882,  889,  883,  890,  884,  891,
      892,  893,  894,  895,  896,  897,  898,  885,  886,  887,
      899,  900,  901,  902,  903,  904,  905,  906,  907,  908,
      909,  910,  888,  914,  889,  915,  890,  917,  891,  892,
      893,  894,  895,  896,  897,  898,  918,  919,  920,  899,
      900,  901,  902,  903,  904,  905,  906,  907,  908,  909,

      910,  911,  914,  921,  915,  922,  917,  923,  912,  924,
      925,  926,  927,  928,  929,  918,  919,  920,  930,  913,
      931,  932,  933,  934,  935,  937,  938,  939,  940,  941,
      911,  942,  921,  943,  922,  944,  923,  912,  924,  925,
      926,  927,  928,  929,  945,  946,  947,  930,  913,  931,
      932,  933,  934,  935,  937,  938,  939,  940,  941,  948,
      942,  949,  943,  952,  944,  953,  950,  954,  471,  955,
      956,  957,  958,  945,  946,  947,  959,  960,  961,  962,
      963,  964,  965,  966,  967,  968,  969,  970,  948,  971,
      949,  951,  952,  974,  953,  975,  954,  471,  955,  956,

      957,  958,  976,  977,  978,  959,  960,  961,  962,  963,
      964,  965,  966,  967,  968,  969,  970,  979,  971,  980,
      951,  981,  974,  982,  975,  983,  984,  986,  987,  988,
      989,  976,  977,  978,  990,  991,  992,  985,  993,  994,
      995,  996,  997,  998, 1000, 1001,  979, 1002,  980,  999,
      981, 1003,  982, 1004,  983,  984,  986,  987,  988,  989,
     1005, 1006, 1007,  990,  991,  992,  985,  993,  994,  995,
      996,  997,  998, 1000, 1001, 1008, 1002, 1009,  999, 1010,
     1003, 1011, 1004, 1012,  472, 1013, 1014, 1015, 1016, 1005,
     1006, 1007, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,

     1026, 1027, 1028, 1029, 1008, 1030, 1009, 1031, 1010, 1032,
     1011, 1033, 1012,  472, 1013, 1014, 1015, 1016, 1034, 1035,
     1037, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029, 1038, 1030, 1039, 1031, 1042, 1032, 1045,
     1033, 1046, 1047, 1048, 1049, 1050, 1051, 1034, 1035, 1037,
     1052, 1040, 1041, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1060, 1061, 1038, 1063, 1039, 1064, 1042, 1065, 1045, 1066,
     1046, 1047, 1048, 1049, 1050, 1051, 1067, 1068, 1069, 1052,
     1040, 1041, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
     1061, 1070, 1063, 1071, 1064, 1072, 1065, 1073, 1066, 1074,

     1076, 1078, 1079, 1080, 1081, 1067, 1068, 1069, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1070, 1094, 1071, 1095, 1072, 1096, 1073, 1097, 1074, 1076,
     1078, 1079, 1080, 1081, 1098, 1099, 1100, 1082, 1083, 1084,
     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1101,
     1094, 1102, 1095, 1103, 1096, 1104, 1097, 1105, 1106, 1107,
     1108, 1109, 1110, 1098, 1099, 1100, 1111, 1112, 1113, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1101, 1124,
     1102, 1125, 1103, 1126, 1104, 1127, 1105, 1106, 1107, 1108,
     1109, 1110, 1128, 1129, 1130, 1111, 1112, 1113, 1115, 1116,

     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1131, 1124, 1132,
     1125, 1133, 1126, 1134, 1127, 1135, 1136, 1137, 1138, 1139,
     1140, 1128, 1129, 1130, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1131, 1153, 1132, 1154,
     1133, 1155, 1134, 1157, 1135, 1136, 1137, 1138, 1139, 1140,
     1158, 1159, 1160, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1152, 1161, 1153, 1162, 1154, 1163,
     1155, 1164, 1157, 1165, 1166, 1167, 1168, 1169, 1170, 1158,
     1159, 1160, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1161, 1183, 1162, 1184, 1163, 1185,

     1164, 1186, 1165, 1166, 1167, 1168, 1169, 1170, 1187, 1188,
     1189, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1190, 1183, 1191, 1184, 1192, 1185, 1193,
     1186, 1194, 1196, 1197, 1198, 1199, 1200, 1187, 1188, 1189,
     1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
     1211, 1212, 1190, 1213, 1191, 1214, 1192, 1214, 1193, 1214,
     1194, 1196, 1197, 1198, 1199, 1200, 1214, 1214, 1214, 1201,
     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1212, 1214, 1213,   55,   55,   55,   55,   55,   55,   55,
       55,   59,   59,   59,   59,   59,   59,   59,   59,   63,

     1214,   63,   63,   63,   63,   63,   63,   65,   65,   65,
       65,   65,   65,   65,   65,   85,   85,   85,   85,   85,
       85,   88,   88,  187,  187,  187,  187,  187,  187,  187,
      194,  194,  194,  194,  194,  194,  194,  194,  198,  198,
      198,  198,  198,  198,  198,  198,  211,  211, 1214,  211,
      211,  211,  211,  211,  213,  213,  213,  213, 1214,  213,
      213,  213,  215,  215,  215,  215,  215,  215,  215,  189,
      189,  189,  189,  189,  189,  189,  193, 1214,  193,  193,
      193,  193,  193,  193,  197, 1214,  197,  197,  197,  197,
      197,  197,  393, 1214,  393,  393,  393,  393,  393,  393,

      585, 1214,  585,  585,  585,  585,  585,  585,  587, 1214,
      587,  587,  587,  587,  587,  587,    7, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214

    } ;

static yyconst flex_int16_t yy_chk[2701] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    6,   12,   16,   12,   23,   23,
       23,   25,   25,   16,   18,   18,   18,   18,   18,   18,

     1228,   21,   33,   21,   21,   21,   21,   21,   21,   18,
       26,   27,    5,    6, 1224,   26,   65,  213,   21,   27,
       36,   27,   43,   65,  213,   48,   27,  193,   27,   27,
      211,   33,  211,   50,   51, 1188,   12,   16,   18,   20,
       27,   20,   20,   20,   20,   20,   20,   21,   27,   36,
       27,   43,   29,   20,   48,   27,   20,   27,   27,   29,
       30,   26, 1135,   51,   30,   50,   29,   65,   30,   29,
       52,   89,   29,   31,   30,   20,  193,   30,   75,   75,
       30,   29,   20, 1078,   31,   20,   31,   85,   29,   30,
     1076,   31,   85,   30,   50,   29,   31,   30,   29,   52,

       89,   29,   31,   30,   20,   28,   30,   37, 1021,   30,
       40,   37,   32,   31,   34,   31,   32,   59, 1018,   59,
       31,   92,   34,   32,   40,   31,   32,   28,   34,   32,
       40,   28,   32, 1001,   28,  977,   37,   28,   85,   40,
       37,   32,   28,   34,  976,   32,   62,   28,   62,  968,
       92,   34,   32,   40,  945,   32,   28,   34,   32,   40,
       28,   32,   90,   28,   35,   35,   28,   93,   59,   38,
       90,   28,   35,   38,   95,   95,   28,   35,   35,   38,
       41,   39,   41,   42,   41,   39,  197,   41,   94,   39,
      882,   90,   53,   35,   35,   39,   93,   62,   38,   90,

       42,   35,   38,   42,   53,   53,   35,   35,   38,   41,
       39,   41,   42,   41,   39,   44,   41,   94,   39,   44,
      206,  206,   44,  881,   39,   44,   68,   98,  832,   42,
      197,  389,   42,   68,   97,   70,   70,   70,   70,   70,
       70,   97,  805,   53,   44,   46,  215,   97,   44,   46,
       70,   44,   46,   46,   44,   45,   98,   45,   99,   46,
       45,  733,   46,   97,  559,   45,  100,   45,   45,   45,
       97,   45,   45,   45,   46,   57,   97,   68,   46,   70,
      389,   46,   46,   57,   45,   57,   45,   99,   46,   45,
       57,   46,   57,   57,   45,  100,   45,   45,   45,  215,

       45,   45,   45,   47,   57,   47,  102,   49,   47,   47,
       49,   49,   57,  102,   57,  106,  110,  635,  635,   57,
       49,   57,   57,  194,  464,  194,   73,   73,   73,   73,
       73,   73,   47,  463,   47,  102,   49,   47,   47,   49,
       49,   73,  102,  391,  106,  110,   71,   71,  414,   49,
       71,   71,   71,   71,   71,   71,   74,  401,   74,   74,
       74,   74,   74,   74,   91,  383,  111,   91,   96,   96,
       73,   76,   76,   74,  194,   76,   76,   76,   76,   76,
       76,  103,   96,  375,  105,  103,  107,  391,   91,  113,
      300,  107,  104,   91,  105,  111,   91,   96,   96,  226,

      114,  112,   74,  104,  104,  104,  226,  226,  115,  116,
      103,   96,  104,  105,  103,  107,  112,   91,  113,  108,
      107,  104,  108,  105,  109,  115,  118,  109,  108,  114,
      112,  119,  104,  104,  104,  108,  108,  115,  116,  117,
      120,  104,  121,  122,  123,  112,  117,  124,  108,  125,
      126,  108,  125,  109,  115,  118,  109,  108,  127,  129,
      119,  124,  132,  189,  108,  108,  133,  134,  117,  120,
      135,  121,  122,  123,   87,  117,  124,   86,  125,  126,
      136,  125,  130,  140,  130,  136,  143,  127,  129,   84,
      124,  132,  130,  130,  142,  133,  134,  130,  130,  135,

      137,  139,  137,  137,  142,  139,  138,  147,  138,  136,
       80,  130,  140,  130,  136,  143,  144,  145,  145,  138,
      138,  130,  130,  142,  144,  148,  130,  130,  138,  137,
      139,  137,  137,  142,  139,  138,  147,  138,  149,  141,
      141,  150,  152,  155,  153,  144,  145,  145,  138,  138,
      141,  151,  153,  156,  148,  151,  157,  138,  158,  160,
      161,  151,   69,  162,  162,   67,  164,  149,  141,  141,
      150,  152,  155,  153,  165,  390,   61,  392,   56,  141,
      151,  153,  156,  585,  151,  157,  168,  158,  160,  161,
      151,  154,  162,  162,  163,  164,  154,  154,  163,  170,

      166,  177,  154,  165,  154,  159,  154,  154,  167,  154,
      154,  179,  154,   54,  159,  168,  159,  166,  159,  167,
      154,  392,  159,  163,  390,  154,  154,  163,  170,  166,
      177,  154,  585,  154,  159,  154,  154,  167,  154,  154,
      179,  154,  173,  159,  169,  159,  166,  159,  167,  169,
      173,  159,  171,  171,  178,  169,  175,  176,  181,  174,
      178,  176,  173,  182,  174,  176,  174,  174,  175,  184,
      185,  173,  180,  169,  174,  186,  180,  587,  169,  173,
      588,  171,  171,  178,  169,  175,  176,  181,  174,  178,
      176,  173,  182,  174,  176,  174,  174,  175,  184,  185,

      187,  180,  219,  174,  186,  180,  192,  220,  224,  192,
       22,  198,  187,  187,  195,  196,  195,  196,  198,  199,
      200,  587,   19,  227,  588,  228,  199,  200,  229,  230,
      192,  219,  231,   17,  233,  192,  220,  224,  192,  202,
      202,  202,  202,  202,  202,  203,  203,  203,  203,  203,
      203,  187,  227,  187,  228,   15,   11,  229,  230,  192,
        7,  231,  198,  233,    4,  195,  196,    3,    0,    0,
      199,  200,  204,  204,  204,  204,  204,  204,  207,  207,
      207,  207,  207,  207,  205,  205,  234,  204,  205,  205,
      205,  205,  205,  205,  208,  208,  208,  208,  208,  208,

      235,  236,  237,  238,  237,  239,  240,  238,  241,  242,
      243,  244,  245,  246,  248,  234,  204,  241,  248,  237,
      247,  247,  251,  253,  250,  243,  243,  250,  243,  235,
      236,  237,  238,  237,  239,  240,  238,  241,  242,  243,
      244,  245,  246,  248,  254,  255,  241,  248,  237,  247,
      247,  251,  253,  250,  243,  243,  250,  243,  252,  257,
      258,  259,  252,  260,  261,  262,  264,  265,  266,  266,
      267,  268,  269,  254,  255,  270,  271,  272,  271,  273,
      274,  275,  276,  277,  278,  279,  280,  252,  257,  258,
      259,  252,  260,  261,  262,  264,  265,  266,  266,  267,

      268,  269,  281,  282,  270,  271,  272,  271,  273,  274,
      275,  276,  277,  278,  279,  280,  283,  284,  285,  286,
      286,  287,  286,  286,  288,  289,  290,  292,  293,  294,
      291,  281,  282,  286,  295,  296,  298,  299,  301,  297,
      303,  304,  305,  286,  306,  283,  284,  285,  291,  297,
      287,  307,  308,  288,  289,  290,  292,  293,  294,  291,
      309,  311,  286,  295,  296,  298,  299,  301,  297,  303,
      304,  305,  286,  306,  312,  314,  313,  291,  297,  313,
      307,  308,  315,  316,  316,  317,  318,  319,  320,  309,
      311,  321,  322,  323,  324,  320,  325,  326,  327,  328,

      329,  330,  324,  312,  314,  313,  331,  329,  313,  332,
      333,  315,  316,  316,  317,  318,  319,  320,  334,  335,
      321,  322,  323,  324,  320,  325,  326,  327,  328,  329,
      330,  324,  336,  337,  338,  331,  329,  339,  332,  333,
      340,  341,  343,  344,  345,  346,  347,  334,  335,  348,
        0,  351,  352,  353,    0,  355,  356,  357,  358,    0,
      359,  336,  337,  338,  360,  349,  339,  361,  362,  340,
      341,  343,  344,  345,  346,  347,  364,  365,  348,  349,
      351,  352,  353,  349,  355,  356,  357,  358,  349,  359,
      367,  368,  363,  360,  349,  369,  361,  362,  363,  366,

      370,  366,  371,  372,  374,  364,  365,  376,  349,  378,
      380,  381,  349,  379,  377,  377,  382,  379,  385,  367,
      368,  363,  386,    0,  369,    0,    0,  363,  366,  370,
      366,  371,  372,  374,    0,  399,  376,  377,  378,  380,
      381,  400,  379,  377,  377,  382,  379,  385,  403,  404,
      405,  386,  394,  394,  394,  394,  394,  394,  395,  395,
      395,  395,  395,  395,  399,  406,  377,  407,  410,  412,
      400,  415,  416,  417,  418,  419,  420,  403,  404,  405,
      421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
      431,  432,  433,  434,  406,  435,  407,  410,  412,  432,

      415,  416,  417,  418,  419,  420,  436,  437,  438,  421,
      422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
      432,  433,  434,  439,  435,  440,  441,  444,  446,  448,
      449,  451,  452,  453,  454,  436,  437,  438,  455,  456,
      458,  459,  460,  462,  465,  466,  467,  468,  469,  470,
        0,  477,  439,  470,  440,  441,  444,  446,  448,  449,
      451,  452,  453,  454,  481,  482,  485,  455,  456,  458,
      459,  460,  462,  465,  466,  467,  468,  469,  470,  475,
      477,  486,  470,  488,  490,  492,  493,  494,  495,  496,
      475,  497,  498,  481,  482,  485,  499,  500,  501,  503,

      504,  505,  490,  505,  506,  507,  508,  509,  475,  510,
      486,  511,  488,  490,  492,  493,  494,  495,  496,  475,
      497,  498,  512,  513,  514,  499,  500,  501,  503,  504,
      505,  490,  505,  506,  507,  508,  509,  515,  510,  516,
      511,  517,  519,  520,  521,  522,  523,  524,  525,  526,
      527,  512,  513,  514,  528,  529,  530,  531,  532,  533,
      534,  535,  536,  538,  540,  541,  515,  542,  516,  543,
      517,  519,  520,  521,  522,  523,  524,  525,  526,  527,
      544,  545,  547,  528,  529,  530,  531,  532,  533,  534,
      535,  536,  538,  540,  541,  548,  542,  549,  543,  546,

      546,  550,  551,  552,  555,  557,  556,  558,  562,  544,
      545,  547,  563,  564,  565,  566,  546,  556,  567,  568,
      569,  570,  571,  572,  548,  573,  549,  574,  546,  546,
      550,  551,  552,  555,  557,  556,  558,  562,  571,  575,
      578,  563,  564,  565,  566,  546,  556,  567,  568,  569,
      570,  571,  572,  579,  573,  581,  574,  584,  586,  590,
      591,  592,  594,  595,  596,  598,  600,  571,  575,  578,
      601,  603,  604,  605,  606,  607,  608,  609,    0,  610,
      612,  614,  579,  615,  581,  616,  584,  617,  590,  591,
      592,  594,  595,  596,  598,  600,  619,  618,  620,  601,

      603,  604,  605,  606,  607,  608,  609,  586,  610,  612,
      614,  621,  615,  622,  616,  618,  617,  623,  624,  625,
      626,  627,  628,  629,  630,  619,  618,  620,  631,  632,
      637,  638,  641,  642,  644,  643,  646,  649,  650,  651,
      621,  643,  622,  652,  618,  653,  623,  624,  625,  626,
      627,  628,  629,  630,  654,  658,  659,  631,  632,  637,
      638,  641,  642,  644,  643,  646,  649,  650,  651,  660,
      643,  661,  652,  663,  653,  664,  665,  666,  667,  669,
      670,  671,  672,  654,  658,  659,  673,  674,  677,  678,
      679,  680,  681,  682,  684,  687,  688,  689,  660,  690,

      661,  691,  663,  692,  664,  665,  666,  667,  669,  670,
      671,  672,  693,  694,  695,  673,  674,  677,  678,  679,
      680,  681,  682,  684,  687,  688,  689,  696,  690,  699,
      691,  700,  692,  701,  702,  703,  704,  705,  706,  707,
      708,  693,  694,  695,  709,  710,  711,  712,  713,  714,
      715,  716,  717,  718,  719,  720,  696,  721,  699,  722,
      700,  723,  701,  702,  703,  704,  705,  706,  707,  708,
      724,  725,  728,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  729,  721,  730,  722,  731,
      723,  732,  736,  737,  738,  739,  740,  741,  745,  724,

      725,  728,  746,  747,  749,  751,  753,  754,  755,  757,
      758,  759,  760,  761,  729,  763,  730,  765,  731,  766,
      732,  736,  737,  738,  739,  740,  741,  745,  767,  768,
      769,  746,  747,  749,  751,  753,  754,  755,  757,  758,
      759,  760,  761,  770,  763,  771,  765,  772,  766,  774,
      775,  776,  778,  780,  782,  784,  785,  767,  768,  769,
      787,  788,  789,  792,  794,  795,  796,  797,  798,  799,
      800,  801,  770,  803,  771,  804,  772,  806,  774,  775,
      776,  778,  780,  782,  784,  785,  807,  808,  810,  787,
      788,  789,  792,  794,  795,  796,  797,  798,  799,  800,

      801,  802,  803,  811,  804,  812,  806,  813,  802,  814,
      815,  816,  817,  818,  819,  807,  808,  810,  820,  802,
      822,  825,  826,  827,  831,  834,  835,  836,  838,  839,
      802,  840,  811,  841,  812,  842,  813,  802,  814,  815,
      816,  817,  818,  819,  843,  844,  845,  820,  802,  822,
      825,  826,  827,  831,  834,  835,  836,  838,  839,  846,
      840,  847,  841,  850,  842,  851,  848,  852,  853,  854,
      855,  856,  858,  843,  844,  845,  860,  863,  864,  866,
      867,  868,  869,  871,  874,  875,  878,  879,  846,  880,
      847,  848,  850,  883,  851,  884,  852,  853,  854,  855,

      856,  858,  885,  886,  891,  860,  863,  864,  866,  867,
      868,  869,  871,  874,  875,  878,  879,  892,  880,  893,
      848,  894,  883,  898,  884,  899,  900,  901,  902,  904,
      907,  885,  886,  891,  908,  909,  910,  900,  911,  912,
      913,  914,  915,  916,  917,  919,  892,  921,  893,  916,
      894,  922,  898,  924,  899,  900,  901,  902,  904,  907,
      925,  927,  928,  908,  909,  910,  900,  911,  912,  913,
      914,  915,  916,  917,  919,  930,  921,  934,  916,  936,
      922,  937,  924,  938,  939,  941,  942,  943,  944,  925,
      927,  928,  946,  947,  948,  949,  951,  952,  953,  954,

      955,  956,  959,  960,  930,  961,  934,  962,  936,  963,
      937,  965,  938,  939,  941,  942,  943,  944,  966,  967,
      969,  946,  947,  948,  949,  951,  952,  953,  954,  955,
      956,  959,  960,  970,  961,  973,  962,  974,  963,  979,
      965,  980,  981,  983,  984,  985,  986,  966,  967,  969,
      987,  973,  973,  989,  992,  993,  994,  995,  996,  997,
      998,  999,  970, 1003,  973, 1004,  974, 1005,  979, 1006,
      980,  981,  983,  984,  985,  986, 1007, 1008, 1010,  987,
      973,  973,  989,  992,  993,  994,  995,  996,  997,  998,
      999, 1011, 1003, 1012, 1004, 1014, 1005, 1016, 1006, 1017,

     1019, 1022, 1023, 1024, 1025, 1007, 1008, 1010, 1030, 1031,
     1032, 1034, 1038, 1039, 1040, 1041, 1045, 1046, 1048, 1049,
     1011, 1050, 1012, 1051, 1014, 1052, 1016, 1053, 1017, 1019,
     1022, 1023, 1024, 1025, 1054, 1055, 1057, 1030, 1031, 1032,
     1034, 1038, 1039, 1040, 1041, 1045, 1046, 1048, 1049, 1058,
     1050, 1060, 1051, 1061, 1052, 1062, 1053, 1063, 1064, 1067,
     1068, 1069, 1072, 1054, 1055, 1057, 1073, 1074, 1075, 1077,
     1080, 1082, 1084, 1085, 1087, 1088, 1089, 1090, 1058, 1091,
     1060, 1092, 1061, 1093, 1062, 1094, 1063, 1064, 1067, 1068,
     1069, 1072, 1095, 1096, 1097, 1073, 1074, 1075, 1077, 1080,

     1082, 1084, 1085, 1087, 1088, 1089, 1090, 1098, 1091, 1101,
     1092, 1102, 1093, 1103, 1094, 1104, 1106, 1109, 1110, 1112,
     1113, 1095, 1096, 1097, 1114, 1115, 1117, 1118, 1119, 1120,
     1121, 1122, 1123, 1125, 1126, 1130, 1098, 1131, 1101, 1133,
     1102, 1134, 1103, 1137, 1104, 1106, 1109, 1110, 1112, 1113,
     1138, 1139, 1140, 1114, 1115, 1117, 1118, 1119, 1120, 1121,
     1122, 1123, 1125, 1126, 1130, 1141, 1131, 1142, 1133, 1143,
     1134, 1144, 1137, 1145, 1147, 1149, 1150, 1151, 1152, 1138,
     1139, 1140, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162,
     1163, 1165, 1166, 1169, 1141, 1170, 1142, 1171, 1143, 1173,

     1144, 1174, 1145, 1147, 1149, 1150, 1151, 1152, 1175, 1176,
     1177, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163,
     1165, 1166, 1169, 1181, 1170, 1182, 1171, 1184, 1173, 1185,
     1174, 1186, 1189, 1190, 1191, 1192, 1193, 1175, 1176, 1177,
     1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1205, 1206,
     1207, 1208, 1181, 1212, 1182,    0, 1184,    0, 1185,    0,
     1186, 1189, 1190, 1191, 1192, 1193,    0,    0,    0, 1194,
     1195, 1196, 1197, 1199, 1200, 1201, 1202, 1205, 1206, 1207,
     1208,    0, 1212, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217,

        0, 1217, 1217, 1217, 1217, 1217, 1217, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1219, 1219, 1219, 1219, 1219,
     1219, 1220, 1220, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1225, 1225,    0, 1225,
     1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226,    0, 1226,
     1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1230,    0, 1230, 1230,
     1230, 1230, 1230, 1230, 1231,    0, 1231, 1231, 1231, 1231,
     1231, 1231, 1232,    0, 1232, 1232, 1232, 1232, 1232, 1232,

     1233,    0, 1233, 1233, 1233, 1233, 1233, 1233, 1234,    0,
     1234, 1234, 1234, 1234, 1234, 1234, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[291] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sql.l"
/* Companion source code for "flex & bison", published by O'Reilly
 * Media, ISBN 978-0-596-15597-1
 * Copyright (c) 2009, Taughannock Networks. All rights reserved.
 * See the README file for license conditions and contact info.
 * $Header: /home/johnl/flnb/code/sql/RCS/glrmysql.l,v 2.1 2009/11/08 02:53:39 johnl Exp $
 */
/*
 * Scanner for mysql subset, GLR version
 */
#line 14 "sql.l"
#include "sql_node_struct.h"
#include "sql.tab.hpp"

#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>

extern "C" int yylex();
extern char globalInputText[10000];
extern int readInputForLexer( char *buffer, int *numBytesRead, int maxBytesToRead );
int oldstate;
extern char linebuf[500];

#undef YY_INPUT
#define YY_INPUT(b,r,s) readInputForLexer(b,&r,s)



#line 1517 "lex.yy.c"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 37 "sql.l"


  /* keywords */

#line 1706 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1215 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2617 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "sql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "sql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "sql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "sql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 49 "sql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "sql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "sql.l"
{ return AS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "sql.l"
{ return ASC; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "sql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "sql.l"
{ return BEFORE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "sql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "sql.l"
{ return BIGINT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "sql.l"
{ return BINARY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "sql.l"
{ return BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "sql.l"
{ return BLOB; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "sql.l"
{ return BOTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "sql.l"
{ return BTREE;}	// 2014-3-24---增加---by Yu
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "sql.l"
{ return BY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "sql.l"
{ return CALL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "sql.l"
{ return CASCADE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "sql.l"
{ return CASE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "sql.l"
{ return CHANGE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "sql.l"
{ return CHAR; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "sql.l"
{ return CHECK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "sql.l"
{ return COLLATE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "sql.l"
{ return COLUMN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "sql.l"
{ return COMMENT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "sql.l"
{ return CONDITION; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "sql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "sql.l"
{ return CONTINUE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "sql.l"
{ return CONVERT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "sql.l"
{ return CREATE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "sql.l"
{ return CROSS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "sql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "sql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 81 "sql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 82 "sql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "sql.l"
{ return CURSOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "sql.l"
{ return DATABASE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "sql.l"
{ return DATABASES; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "sql.l"
{ return DAY;}//---5.26fzh---
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "sql.l"
{ return DATE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "sql.l"
{ return DATETIME; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "sql.l"
{ return DAY_HOUR; }//---5.26fzh---
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "sql.l"
{ return DAY_MICROSECOND; }//---5.26fzh---
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "sql.l"
{ return DAY_MINUTE; }//---5.26fzh---
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "sql.l"
{ return DAY_SECOND; }//---5.26fzh---
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "sql.l"
{ return DECIMAL; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 94 "sql.l"
{ return DECLARE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "sql.l"
{ return DEFAULT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "sql.l"
{ return DELAYED; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "sql.l"
{ return DELETE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 98 "sql.l"
{ return DESC; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 99 "sql.l"
{ return DESCRIBE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 100 "sql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 101 "sql.l"
{ return DISTINCT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "sql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "sql.l"
{ return DIV; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 104 "sql.l"
{ return DOUBLE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 105 "sql.l"
{ return DROP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 106 "sql.l"
{ return DUAL; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 107 "sql.l"
{ return EACH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 108 "sql.l"
{ return ELSE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 109 "sql.l"
{ return ELSEIF; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 110 "sql.l"
{ return END; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 111 "sql.l"
{ return ENUM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 112 "sql.l"
{ return ESCAPED; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 113 "sql.l"
{ return EXISTS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 114 "sql.l"
{ return EXIT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 115 "sql.l"
{ return EXPLAIN; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 116 "sql.l"
{ return FETCH; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 117 "sql.l"
{ return FLOAT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 118 "sql.l"
{ return FOR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 119 "sql.l"
{ return FORCE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 120 "sql.l"
{ return FOREIGN; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 121 "sql.l"
{ return FROM; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 122 "sql.l"
{ return FULLTEXT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "sql.l"
{ return GRANT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "sql.l"
{ return GROUP; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "sql.l"
{ return HASH; }	// 2014-3-24---增加---by Yu
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "sql.l"
{ return HAVING; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "sql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "sql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 129 "sql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 130 "sql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 131 "sql.l"
{ return IF; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 132 "sql.l"
{ return IGNORE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 133 "sql.l"
{ return IN; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 134 "sql.l"
{ return INFILE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 135 "sql.l"
{ return INNER; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 136 "sql.l"
{ return INOUT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 137 "sql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 138 "sql.l"
{ return INSERT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 139 "sql.l"
{ return INTEGER; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 140 "sql.l"
{ return INTERVAL; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 141 "sql.l"
{ return INTO; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 142 "sql.l"
{ return IS; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 143 "sql.l"
{ return ITERATE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 144 "sql.l"
{ return JOIN; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 145 "sql.l"
{ return INDEX; }	// 2014-3-24---增加---by Yu
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 146 "sql.l"
{ return KEY; }	// 2014-3-24---修改---by Yu
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 147 "sql.l"
{ return KEYS; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 148 "sql.l"
{ return KILL; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 149 "sql.l"
{ return LEADING; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 150 "sql.l"
{ return LEAVE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 151 "sql.l"
{ return LEFT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 152 "sql.l"
{ return LIKE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 153 "sql.l"
{ return LIMIT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 154 "sql.l"
{ return LINES; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 155 "sql.l"
{ return LOAD; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 156 "sql.l"
{ return LOCALTIME; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 157 "sql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 158 "sql.l"
{ return LOCK; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 159 "sql.l"
{ return LONG; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 160 "sql.l"
{ return LONGBLOB; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 161 "sql.l"
{ return LONGTEXT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 162 "sql.l"
{ return LOOP; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 163 "sql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 164 "sql.l"
{ return MATCH; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 165 "sql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 166 "sql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 167 "sql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 168 "sql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 169 "sql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 170 "sql.l"
{ return MOD; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 171 "sql.l"
{ return MODIFIES; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 172 "sql.l"
{ return NATURAL; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 173 "sql.l"
{ return NOT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 174 "sql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 175 "sql.l"
{ return NULLX; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 176 "sql.l"
{ return NUMBER; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 177 "sql.l"
{ return ON; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 178 "sql.l"
{ return DUPLICATE; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 179 "sql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 180 "sql.l"
{ return OPTION; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 181 "sql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 182 "sql.l"
{ return OR; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 183 "sql.l"
{ return ORDER; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 184 "sql.l"
{ return OUT; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 185 "sql.l"
{ return OUTER; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 186 "sql.l"
{ return OUTFILE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 187 "sql.l"
{ return PARTITIONED; }	// 2014-2-24---增加对这个词的识别---by余楷
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 188 "sql.l"
{ return PRECISION; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 189 "sql.l"
{ return PRIMARY; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 190 "sql.l"
{ return PROCEDURE; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 191 "sql.l"
{ return PROJECTION; }	// 2014-2-24---增加对这个词的识别---by余楷
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 192 "sql.l"
{ return PURGE; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 193 "sql.l"
{ return QUICK; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 194 "sql.l"
{ return QUARTER;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 195 "sql.l"
{ return READ; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 196 "sql.l"
{ return READS; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 197 "sql.l"
{ return REAL; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 198 "sql.l"
{ return REFERENCES; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 199 "sql.l"
{ return REGEXP; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 200 "sql.l"
{ return RELEASE; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 201 "sql.l"
{ return RENAME; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 202 "sql.l"
{ return REPEAT; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 203 "sql.l"
{ return REPLACE; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 204 "sql.l"
{ return REQUIRE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 205 "sql.l"
{ return RESTRICT; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 206 "sql.l"
{ return RETURN; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 207 "sql.l"
{ return REVOKE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 208 "sql.l"
{ return RIGHT; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 209 "sql.l"
{ return ROLLUP; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 210 "sql.l"
{ return SCHEMA; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 211 "sql.l"
{ return SCHEMAS; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 212 "sql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 213 "sql.l"
{ return SELECT; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 214 "sql.l"
{ return SENSITIVE; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 215 "sql.l"
{ return SEPARATOR; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 216 "sql.l"
{ return SET; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 217 "sql.l"
{ return SHOW; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 218 "sql.l"
{ return SMALLINT; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 219 "sql.l"
{ return SOME; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 220 "sql.l"
{ return SONAME; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 221 "sql.l"
{ return SPATIAL; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 222 "sql.l"
{ return SPECIFIC; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 223 "sql.l"
{ return SQL; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 224 "sql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 225 "sql.l"
{ return SQLSTATE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 226 "sql.l"
{ return SQLWARNING; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 227 "sql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 228 "sql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 229 "sql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 230 "sql.l"
{ return SSL; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 231 "sql.l"
{ return STARTING; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 232 "sql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 233 "sql.l"
{ return TABLE; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 234 "sql.l"
{ return TABLES; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 235 "sql.l"
{ return TEMPORARY; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 236 "sql.l"
{ return TERMINATED; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 237 "sql.l"
{ return TEXT; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 238 "sql.l"
{ return THEN; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 239 "sql.l"
{ return TIME; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 240 "sql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 241 "sql.l"
{ return TINYINT; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 242 "sql.l"
{ return TINYTEXT; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 243 "sql.l"
{ return TO; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 244 "sql.l"
{ return TRAILING; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 245 "sql.l"
{ return TRIGGER; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 246 "sql.l"
{ return UNDO; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 247 "sql.l"
{ return UNION; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 248 "sql.l"
{ return UNIQUE; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 249 "sql.l"
{ return UNLOCK; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 250 "sql.l"
{ return UNSIGNED; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 251 "sql.l"
{ return UPDATE; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 252 "sql.l"
{ return USAGE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 253 "sql.l"
{ return USE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 254 "sql.l"
{ return USING; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 255 "sql.l"
{ return UTC_DATE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 256 "sql.l"
{ return UTC_TIME; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 257 "sql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 258 "sql.l"
{ return VALUES; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 259 "sql.l"
{ return VARBINARY; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 260 "sql.l"
{ return VARCHAR; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 261 "sql.l"
{ return VARYING; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 262 "sql.l"
{ return WHEN; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 263 "sql.l"
{ return WHERE; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 264 "sql.l"
{ return WEEK;}//---5.26fzh---
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 265 "sql.l"
{ return WHILE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 266 "sql.l"
{ return WITH; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 267 "sql.l"
{ return WRITE; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 268 "sql.l"
{ return XOR; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 269 "sql.l"
{ return YEAR; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 270 "sql.l"
{ return YEAR_MONTH; }//---5.26fzh---
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 271 "sql.l"
{ return ZEROFILL; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 272 "sql.l"
{ return BEGINT; }
	YY_BREAK
/* numbers */
case 229:
YY_RULE_SETUP
#line 277 "sql.l"
{ yylval.strval = strdup(yytext); return INTNUM; } 	// 2014-4-14---save int value in string type
	YY_BREAK
case 230:
#line 281 "sql.l"
case 231:
#line 282 "sql.l"
case 232:
#line 283 "sql.l"
case 233:
#line 284 "sql.l"
case 234:
YY_RULE_SETUP
#line 285 "sql.l"
{ yylval.strval = strdup(yytext); return APPROXNUM; }	// 2014-4-14---save double value in string type
	YY_BREAK
/* booleans */	// 2014-4-14---save bool value in string type
case 235:
YY_RULE_SETUP
#line 288 "sql.l"
{ yylval.strval = "1"; return BOOL; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 289 "sql.l"
{ yylval.strval = "-1"; return BOOL; }	// 2014-4-14---not supported now---Yu
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 290 "sql.l"
{ yylval.strval = "0"; return BOOL; }
	YY_BREAK
/* strings */
case 238:
#line 296 "sql.l"
case 239:
YY_RULE_SETUP
#line 296 "sql.l"
{
				char *temp = strdup(yytext); 
				//printf("temp:%s\n",temp);
				yylval.strval = strdup(yytext);
				
				//2014-4-3---处理转义字符以及消去首尾的引号---by Yu
				GetCorrectString(yylval.strval, temp);
				
				//printf("the string is %s\n",yylval.strval);
				return STRING;
			}
	YY_BREAK
case 240:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 308 "sql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 241:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 309 "sql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 242:
#line 313 "sql.l"
case 243:
YY_RULE_SETUP
#line 313 "sql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 244:
#line 318 "sql.l"
case 245:
YY_RULE_SETUP
#line 318 "sql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* operators */
case 246:
YY_RULE_SETUP
#line 322 "sql.l"
{ return yytext[0]; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 324 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 325 "sql.l"
{ return OR; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 327 "sql.l"
{ yylval.subtok = 1; return COMPARISON; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 328 "sql.l"
{ yylval.subtok = 2; return COMPARISON; }
	YY_BREAK
case 251:
#line 330 "sql.l"
case 252:
YY_RULE_SETUP
#line 330 "sql.l"
{ yylval.subtok = 3; return COMPARISON; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 331 "sql.l"
{ yylval.subtok = 4; return COMPARISON; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 332 "sql.l"
{ yylval.subtok = 5; return COMPARISON; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 333 "sql.l"
{ yylval.subtok = 6; return COMPARISON; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 334 "sql.l"
{ yylval.subtok = 12; return COMPARISON; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 336 "sql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 337 "sql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 259:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 341 "sql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 260:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 342 "sql.l"
{ return FTRIM; }
	YY_BREAK
case 261:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 343 "sql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 262:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 344 "sql.l"
{ return FDATE_SUB; }
	YY_BREAK
case 263:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 345 "sql.l"
{ return FUPPER; }//---3.25fzh---
	YY_BREAK
case 264:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 346 "sql.l"
{ return FCOALESCE; }
	YY_BREAK
case 265:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 347 "sql.l"
{ return FCAST; }
	YY_BREAK
case 266:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 348 "sql.l"
{ return FCONVERT; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
/* 
        ---2.18add aggrection functions
         */
case 267:
YY_RULE_SETUP
#line 355 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FCOUNT;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 359 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FSUM;
           yylval.strval = strdup(yytext);
           return NAME; }           
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 363 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FAVG;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 367 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FMIN;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 371 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FMAX;
           yylval.strval = strdup(yytext);
           return NAME; } 
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 376 "sql.l"
{ yylval.strval = strdup(yytext);
                          return NAME; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 378 "sql.l"
{ yylval.strval = strdup(yytext+1);
                          yylval.strval[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 274:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 382 "sql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 275:
#line 386 "sql.l"
case 276:
#line 387 "sql.l"
case 277:
#line 388 "sql.l"
case 278:
YY_RULE_SETUP
#line 388 "sql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 279:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 390 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 280:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 391 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 281:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 392 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 395 "sql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 283:
YY_RULE_SETUP
#line 398 "sql.l"
;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 399 "sql.l"
;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 401 "sql.l"
{ oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 402 "sql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 403 "sql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 404 "sql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 407 "sql.l"
/* white space */
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 408 "sql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 410 "sql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3311 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1215 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1215 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1214);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 410 "sql.l"




